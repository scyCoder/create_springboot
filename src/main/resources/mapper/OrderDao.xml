<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.OrderDao">

    <!--开启本mapper的namespace下的二级缓存-->
    <!--
        eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
        (1) LRU,最近最少使用的，一处最长时间不用的对象
        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
        (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
        (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
                移除最长时间不用的对形象

        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果你不配置它，那么当
        SQL被执行的时候才会去刷新缓存。

        size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
        这里配置的是1024个对象

        readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
        办法修改缓存，他的默认值是false，不允许我们修改
    -->
    <cache eviction="LRU" flushInterval="1000000" readOnly="true" size="1024"></cache>
    <!--
       <cache-ref namespace=""/> 关联查询二级缓存，需要指出对应的mapper类
    -->
    <resultMap type="com.example.demo.entity.Order" id="OrderMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="price" column="price" jdbcType="INTEGER"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="OrderMap">
        select
          id, price
        from `order`
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="OrderMap">
        select
          id, price
        from `order`
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="OrderMap">
        select
        id, price
        from `order`
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="price != null">
                and price = #{price}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into ``order``(price)
        values (#{price})
    </insert>

    <insert id="insertOrder" keyProperty="id" useGeneratedKeys="true">
        insert into ``order``(price)
        values (#{price,jdbcType=INTEGER} * 1000)
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into `order`(price)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.price})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into `order`(price)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.price})
        </foreach>
        on duplicate key update
        price = values(price)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update `order`
        <set>
            <if test="price != null">
                price = #{price},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from `order` where id = #{id}
    </delete>

</mapper>